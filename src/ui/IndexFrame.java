/*
主类
 */
package ui;

import tools.ImageUtil;
import config.StackData;
import config.ConfigData;
import java.awt.image.BufferedImage;
import java.io.FilenameFilter;
import javax.imageio.ImageIO;
import java.io.File;
import java.io.IOException;

import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import tools.ScaleIcon;
import binary.OtsuAlgorithm;
import gray.AverageGray;
import gray.MaxGray;
import java.util.ArrayList;
import noise.MeanFilter;
import noise.MedianFilter;
import noise.SymmetricalNeighborMeanFiltering;
import lines.CleanLines1;
import java.util.Stack;
import segment.SegCfg;
import segment.SegWaterDrop;
import gray.RgbGray;
import gray.WeightedAverageGray;
import java.awt.image.ColorModel;
import java.awt.image.WritableRaster;
import javax.swing.DefaultListModel;
import binary.NiBlackAlgorithm;
import binary.BersenAlgorithm;
import binary.SauvolaAlgorithm;
import binary.IterationAlgorithm;
import java.awt.Color;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.Collections;
import javax.swing.JOptionPane;
import segment.FCMAlgorithm;
import perfect.CorrodeAndExpend;
import config.WRConfig;
import java.awt.event.KeyEvent;
import java.util.Arrays;
import java.util.List;
import trainPredict.Identy;
import trainPredict.Train;
import tools.ScanCut;

/**
 *
 * @author {
 * @_@}
 */
public class IndexFrame extends javax.swing.JFrame {

    /**
     * Creates new form IndexFrame
     */
    public IndexFrame() {
        initComponents();
        //num = Integer.parseInt(txtNum.getText().trim());
        num = (int) spinnerNum.getValue();
        getCurrentPath();
    }

    public File imgFiles[];
    public String imgPath = "";
    public int imgNo = 0;
    public OtsuAlgorithm preprocess1 = new OtsuAlgorithm();
    public BufferedImage processImg = null;
    public BufferedImage srcImg = null;
    public BufferedImage tmp = null;
    public Stack<StackData> processMethod = new Stack<StackData>();
    public ArrayList<ConfigData> nMethod = new ArrayList<ConfigData>();
    public ArrayList<BufferedImage> segImgs = null;
    public int num;
    public String currentPath = "";
    public String fontPath = "";
    public String fontName = "";
    int fontFlag = 0;
    int configFlag = 0;
    File label;
    File result;
    File model;
    File test;
    File train;
    File config;
    ArrayList<BufferedImage> subImgList;
    public char[] predictResult;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel_main = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lblSrcName = new javax.swing.JLabel();
        lblProcessName = new javax.swing.JLabel();
        lblSrcImg = new javax.swing.JLabel();
        btnReadNextImg = new javax.swing.JButton();
        lblProcessImg = new javax.swing.JLabel();
        btnRestoreImg = new javax.swing.JButton();
        lblSeg1 = new javax.swing.JLabel();
        lblSeg2 = new javax.swing.JLabel();
        lblSeg3 = new javax.swing.JLabel();
        lblSeg4 = new javax.swing.JLabel();
        lblSeg6 = new javax.swing.JLabel();
        lblSeg7 = new javax.swing.JLabel();
        lblSeg8 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        lblSeg5 = new javax.swing.JLabel();
        spinnerNum = new javax.swing.JSpinner();
        jLabel8 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        txtPredictResult = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        cbxSimpleSub = new javax.swing.JCheckBox();
        lblBinaryName = new javax.swing.JLabel();
        cbxOstu = new javax.swing.JCheckBox();
        lblNoiseName = new javax.swing.JLabel();
        cbxMeanFilter = new javax.swing.JCheckBox();
        cbxSymmetricalNeighborMeanFiltering = new javax.swing.JCheckBox();
        lblLinesName = new javax.swing.JLabel();
        cbxAlgorithm1 = new javax.swing.JCheckBox();
        lblSegName = new javax.swing.JLabel();
        cbxSegCfg = new javax.swing.JCheckBox();
        cbxMedianFilter = new javax.swing.JCheckBox();
        jLabel13 = new javax.swing.JLabel();
        rbtnGrayR = new javax.swing.JRadioButton();
        rbtnGrayG = new javax.swing.JRadioButton();
        rbtnGrayB = new javax.swing.JRadioButton();
        lblRName = new javax.swing.JLabel();
        lblGName = new javax.swing.JLabel();
        lblBName = new javax.swing.JLabel();
        txtRValue = new javax.swing.JTextField();
        txtGValue = new javax.swing.JTextField();
        txtBValue = new javax.swing.JTextField();
        rbtnGrayMax = new javax.swing.JRadioButton();
        rbtnGrayWeightedAverage = new javax.swing.JRadioButton();
        rbtnGrayAverage = new javax.swing.JRadioButton();
        jLabel1 = new javax.swing.JLabel();
        cbxNiBlack = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        txtNiBlackK = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtNiBlackW = new javax.swing.JTextField();
        cbxBersen = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        txtBersenW = new javax.swing.JTextField();
        cbkSauvola = new javax.swing.JCheckBox();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtSauvolaK = new javax.swing.JTextField();
        txtSauvolaW = new javax.swing.JTextField();
        cbxIteration = new javax.swing.JCheckBox();
        cbxFCM = new javax.swing.JCheckBox();
        jCheckBox2 = new javax.swing.JCheckBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel12 = new javax.swing.JLabel();
        txtFCMexponent = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        txtFCMiternum = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        txtImgPath = new javax.swing.JTextField();
        lblNumber = new javax.swing.JLabel();
        btnReadFiles = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        btnOpenFont = new javax.swing.JButton();
        btnCreateNewFont = new javax.swing.JButton();
        txtFontName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        rbtnNumCapitals = new javax.swing.JRadioButton();
        rbtnNum = new javax.swing.JRadioButton();
        rbtnCapitals = new javax.swing.JRadioButton();
        rbtnNumLetter = new javax.swing.JRadioButton();
        rbtnLetter = new javax.swing.JRadioButton();
        jLabel9 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        cbxRealTimeTrain = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Train");
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel_main.setBackground(new java.awt.Color(255, 255, 255));
        jPanel_main.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSrcName.setText("源图片：");

        lblProcessName.setText("处理后：");

        lblSrcImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnReadNextImg.setText("下一个");
        btnReadNextImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReadNextImgMouseClicked(evt);
            }
        });

        lblProcessImg.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnRestoreImg.setText("还原图片");
        btnRestoreImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnRestoreImgMouseClicked(evt);
            }
        });

        lblSeg1.setText("1");
        lblSeg1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg2.setText("2");
        lblSeg2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg3.setText("3");
        lblSeg3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg4.setText("4");
        lblSeg4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg6.setText("6");
        lblSeg6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg7.setText("7");
        lblSeg7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblSeg8.setText("8");
        lblSeg8.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setText("验证码个数：");

        lblSeg5.setText("5");
        lblSeg5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        spinnerNum.setModel(new javax.swing.SpinnerNumberModel(4, 1, 8, 1));
        spinnerNum.setValue(4);
        spinnerNum.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinnerNumStateChanged(evt);
            }
        });

        jLabel8.setText("识别结果:");

        jButton3.setText("保存配置");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });

        txtPredictResult.setForeground(new java.awt.Color(255, 0, 0));
        txtPredictResult.setText("----");
        txtPredictResult.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtPredictResultKeyPressed(evt);
            }
        });

        jLabel15.setText("分割结果:");

        jLabel16.setText("处理流程:");

        jScrollPane2.setAutoscrolls(true);

        jList1.setMaximumSize(new java.awt.Dimension(0, 130));
        jScrollPane2.setViewportView(jList1);

        jButton2.setText("清除配置");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });

        jButton4.setText("增量训练");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        jButton5.setText("批量分割");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton5MouseClicked(evt);
            }
        });
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("批量训练");
        jButton6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton6MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSrcName)
                    .addComponent(lblProcessName)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSrcImg, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblProcessImg, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(18, 18, 18)
                                .addComponent(txtPredictResult, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinnerNum, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSeg1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg3, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg5, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg6, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblSeg7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblSeg8, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 15, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnRestoreImg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnReadNextImg, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSrcName)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel18)
                                .addComponent(spinnerNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnReadNextImg)))
                        .addGap(37, 37, 37)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblProcessName)
                            .addComponent(lblProcessImg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(txtPredictResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRestoreImg)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSeg1, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg2, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg3, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg4, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg5, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg7, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSeg8, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblSrcImg, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(jLabel16)
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton4)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnReadNextImg, btnRestoreImg, jButton3});

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setText("去黑边:");

        cbxSimpleSub.setText("简单裁剪");
        cbxSimpleSub.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSimpleSubItemStateChanged(evt);
            }
        });
        cbxSimpleSub.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSimpleSubActionPerformed(evt);
            }
        });

        lblBinaryName.setText("二值化:");

        cbxOstu.setText("大津算法");
        cbxOstu.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxOstuItemStateChanged(evt);
            }
        });

        lblNoiseName.setText("去噪点:");

        cbxMeanFilter.setText("均值滤波器");
        cbxMeanFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMeanFilterItemStateChanged(evt);
            }
        });

        cbxSymmetricalNeighborMeanFiltering.setText("对称近邻均值滤波");
        cbxSymmetricalNeighborMeanFiltering.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSymmetricalNeighborMeanFilteringItemStateChanged(evt);
            }
        });

        lblLinesName.setText("去除干扰线:");

        cbxAlgorithm1.setText("算法1");
        cbxAlgorithm1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxAlgorithm1ItemStateChanged(evt);
            }
        });

        lblSegName.setText("分割图片:");

        cbxSegCfg.setText("CFS连通域切割");
        cbxSegCfg.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxSegCfgItemStateChanged(evt);
            }
        });

        cbxMedianFilter.setText("中值滤波器");
        cbxMedianFilter.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMedianFilterItemStateChanged(evt);
            }
        });

        jLabel13.setText("灰度化:");

        buttonGroup1.add(rbtnGrayR);
        rbtnGrayR.setText("R");
        rbtnGrayR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayRItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnGrayG);
        rbtnGrayG.setText("G");
        rbtnGrayG.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayGItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnGrayB);
        rbtnGrayB.setText("B");
        rbtnGrayB.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayBItemStateChanged(evt);
            }
        });

        lblRName.setText("R");

        lblGName.setText("G");

        lblBName.setText("B");

        txtRValue.setText(" 0.299");

        txtGValue.setText("0.587");

        txtBValue.setText("0.114");

        buttonGroup1.add(rbtnGrayMax);
        rbtnGrayMax.setText("最大值法");
        rbtnGrayMax.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayMaxItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnGrayWeightedAverage);
        rbtnGrayWeightedAverage.setText("加权平均法");
        rbtnGrayWeightedAverage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayWeightedAverageItemStateChanged(evt);
            }
        });

        buttonGroup1.add(rbtnGrayAverage);
        rbtnGrayAverage.setText("平均值法 ");
        rbtnGrayAverage.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rbtnGrayAverageItemStateChanged(evt);
            }
        });
        rbtnGrayAverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnGrayAverageActionPerformed(evt);
            }
        });

        jLabel1.setText("分量法:");

        cbxNiBlack.setText("NiBlack算法");
        cbxNiBlack.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxNiBlackItemStateChanged(evt);
            }
        });

        jLabel2.setText("系数K：");

        txtNiBlackK.setText("0.5");

        jLabel3.setText("W大小：");

        txtNiBlackW.setText("5");

        cbxBersen.setText("Bersen算法");
        cbxBersen.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxBersenItemStateChanged(evt);
            }
        });

        jLabel5.setText("W大小：");

        txtBersenW.setText("5");

        cbkSauvola.setText("Sauvola算法");
        cbkSauvola.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbkSauvolaItemStateChanged(evt);
            }
        });

        jLabel6.setText("系数K:");

        jLabel7.setText("W大小：");

        txtSauvolaK.setText("0.5");

        txtSauvolaW.setText("5");

        cbxIteration.setText("循环阈值算法");
        cbxIteration.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxIterationItemStateChanged(evt);
            }
        });

        cbxFCM.setText("FCM模糊C均值");
        cbxFCM.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxFCMItemStateChanged(evt);
            }
        });

        jCheckBox2.setText("膨胀算法");
        jCheckBox2.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox2ItemStateChanged(evt);
            }
        });

        jCheckBox3.setText("腐蚀算法");
        jCheckBox3.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCheckBox3ItemStateChanged(evt);
            }
        });

        jLabel12.setText("图片修补:");

        txtFCMexponent.setText("3");

        jLabel19.setText("指数：");

        jLabel20.setText("迭代次数：");

        txtFCMiternum.setText("50");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxSimpleSub)
                    .addComponent(rbtnGrayMax)
                    .addComponent(rbtnGrayAverage)
                    .addComponent(rbtnGrayWeightedAverage)
                    .addComponent(cbxOstu)
                    .addComponent(cbxNiBlack)
                    .addComponent(cbxBersen)
                    .addComponent(cbkSauvola)
                    .addComponent(cbxMeanFilter)
                    .addComponent(cbxAlgorithm1)
                    .addComponent(jCheckBox2)
                    .addComponent(cbxSegCfg)
                    .addComponent(cbxFCM))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtBersenW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtNiBlackK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSauvolaK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtNiBlackW, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtSauvolaW, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(69, Short.MAX_VALUE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cbxMedianFilter)
                                .addGap(18, 18, 18)
                                .addComponent(cbxSymmetricalNeighborMeanFiltering))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbxIteration)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel5)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(lblRName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtRValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblGName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtGValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(8, 8, 8)
                                        .addComponent(lblBName)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(txtBValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(jLabel19)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFCMexponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel20)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtFCMiternum, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(28, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(143, 143, 143)
                        .addComponent(jCheckBox3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(rbtnGrayR)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnGrayG)
                        .addGap(8, 8, 8)
                        .addComponent(rbtnGrayB))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblLinesName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblNoiseName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel12))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblSegName))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel13))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(lblBinaryName)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rbtnGrayB, rbtnGrayG, rbtnGrayR});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBValue, txtGValue, txtRValue});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtBersenW, txtNiBlackK, txtNiBlackW, txtSauvolaK, txtSauvolaW});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSimpleSub)
                .addGap(6, 6, 6)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(rbtnGrayR)
                    .addComponent(rbtnGrayG)
                    .addComponent(rbtnGrayB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbtnGrayMax)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbtnGrayAverage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtnGrayWeightedAverage)
                    .addComponent(lblRName)
                    .addComponent(txtRValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblGName)
                    .addComponent(lblBName)
                    .addComponent(txtBValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtGValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblBinaryName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxOstu)
                    .addComponent(cbxIteration))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxNiBlack)
                    .addComponent(jLabel2)
                    .addComponent(txtNiBlackK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtNiBlackW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxBersen)
                    .addComponent(jLabel5)
                    .addComponent(txtBersenW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(1, 1, 1)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbkSauvola)
                    .addComponent(jLabel6)
                    .addComponent(txtSauvolaK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtSauvolaW, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblNoiseName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxMeanFilter)
                    .addComponent(cbxMedianFilter)
                    .addComponent(cbxSymmetricalNeighborMeanFiltering))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblLinesName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxAlgorithm1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox2)
                    .addComponent(jCheckBox3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblSegName, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbxSegCfg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxFCM)
                    .addComponent(jLabel19)
                    .addComponent(txtFCMexponent, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(txtFCMiternum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rbtnGrayB, rbtnGrayG, rbtnGrayR});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBValue, txtGValue, txtRValue});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtBersenW, txtNiBlackK, txtNiBlackW, txtSauvolaK, txtSauvolaW});

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblNumber.setText("0/0");

        btnReadFiles.setText("读取文件");
        btnReadFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnReadFilesMouseClicked(evt);
            }
        });
        btnReadFiles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadFilesActionPerformed(evt);
            }
        });

        jLabel10.setText("当前字库:");

        jLabel11.setText("空");

        btnOpenFont.setText("打开字库");
        btnOpenFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnOpenFontMouseClicked(evt);
            }
        });

        btnCreateNewFont.setText("新建字库");
        btnCreateNewFont.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCreateNewFontMouseClicked(evt);
            }
        });

        txtFontName.setText(" ");

        jLabel14.setText("新建字库名：");

        buttonGroup2.add(rbtnNumCapitals);
        rbtnNumCapitals.setText("数字+大小写字母");

        buttonGroup2.add(rbtnNum);
        rbtnNum.setText("数字");

        buttonGroup2.add(rbtnCapitals);
        rbtnCapitals.setText("大小写字母");

        buttonGroup2.add(rbtnNumLetter);
        rbtnNumLetter.setText("数字+小写字母");

        buttonGroup2.add(rbtnLetter);
        rbtnLetter.setText("小写字母");

        jLabel9.setText("验证码类型：");

        jButton1.setText("SVM训练");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        cbxRealTimeTrain.setText("实时训练");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtImgPath, javax.swing.GroupLayout.PREFERRED_SIZE, 367, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jLabel14)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(txtFontName, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lblNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel10)
                                            .addComponent(cbxRealTimeTrain)))
                                    .addComponent(jLabel9)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(45, 45, 45)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(rbtnNum)
                                        .addGap(29, 29, 29)
                                        .addComponent(rbtnLetter)
                                        .addGap(27, 27, 27)
                                        .addComponent(rbtnCapitals))
                                    .addGroup(jPanel3Layout.createSequentialGroup()
                                        .addComponent(rbtnNumLetter)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rbtnNumCapitals)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 4, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReadFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnOpenFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnCreateNewFont, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(482, 482, 482)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreateNewFont, btnOpenFont, btnReadFiles, jButton1});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtImgPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNumber)
                    .addComponent(btnReadFiles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFontName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(9, 9, 9)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(btnOpenFont))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnNum)
                            .addComponent(rbtnLetter)
                            .addComponent(rbtnCapitals)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateNewFont)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbtnNumLetter)
                    .addComponent(rbtnNumCapitals)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(cbxRealTimeTrain)))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreateNewFont, btnOpenFont, btnReadFiles, jButton1});

        javax.swing.GroupLayout jPanel_mainLayout = new javax.swing.GroupLayout(jPanel_main);
        jPanel_main.setLayout(jPanel_mainLayout);
        jPanel_mainLayout.setHorizontalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainLayout.createSequentialGroup()
                .addGroup(jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel_mainLayout.setVerticalGroup(
            jPanel_mainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel_mainLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel_main, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel_main, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void getCurrentPath() {
        File directory = new File("");
        try {
            currentPath = directory.getCanonicalPath();

            fontPath = currentPath + "/Font";

            //System.out.println(currentPath);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void showProcessImg() {
        lblProcessImg.setIcon(new ScaleIcon(new ImageIcon(this.processImg)));
    }

    public void showSrcImg() {
        lblSrcImg.setIcon(new ScaleIcon(new ImageIcon(this.srcImg)));
    }

    public void showMethod() {
        DefaultListModel listMethod = new DefaultListModel();
        for (StackData sd : processMethod) {
            listMethod.addElement(sd.method);
        }
        jList1.setModel(listMethod);
    }

    public void beforeProcess() {
        if (processMethod.empty()) {
            this.processImg = srcImg;
        } else {
            this.processImg = processMethod.peek().img;
        }
    }

    public void afterProcess(String method, BufferedImage tmp, int n, String v) {

        lblProcessImg.setIcon(new ScaleIcon(new ImageIcon(processImg)));
        StackData d = new StackData(method, tmp);
        processMethod.push(d);
        ConfigData c = new ConfigData(n, v);
        nMethod.add(c);
        showMethod();
    }

    public void cancelMethod() {
        if (!processMethod.empty()) {
            processMethod.pop();
        }
        if (nMethod.size() != 0) {
            nMethod.remove(nMethod.size() - 1);
        }
        //nMethod.clear();
        showMethod();
    }

    public void readImags() {
        File dir = new File(this.imgPath);
        this.imgFiles = dir.listFiles(new FilenameFilter() {
            public boolean isJpg(String file) {
                if (file.toLowerCase().endsWith(".jpg")) {
                    return true;
                } else {
                    return false;
                }
            }

            @Override
            public boolean accept(File dir, String name) {
                return isJpg(name);
            }
        });
    }


    private void cbxSimpleSubItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSimpleSubItemStateChanged

        if (cbxSimpleSub.isSelected()) // if check box is checked
        {
            beforeProcess();
            processImg = processImg.getSubimage(1, 1, processImg.getWidth() - 1 * 2, processImg.getHeight() - 1 * 2);
            try {
                ImageIO.write(processImg, "JPEG", new File("tmp.jpg"));
                processImg = ImageIO.read(new File("tmp.jpg"));
            } catch (Exception e) {
                e.printStackTrace();
            }
            BufferedImage g = deepCopy(processImg);
            //RgbGray.gray(g, 1);
            afterProcess("简单裁剪", g, 1, "");
            this.showProcessImg();

        } else {    // if check box unchecked 
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxSimpleSubItemStateChanged

    private void cbxOstuItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxOstuItemStateChanged

        if (cbxOstu.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            OtsuAlgorithm.getBinaryImage(g);
            processImg = g;
            showProcessImg();
            afterProcess("大津算法", g, 8, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxOstuItemStateChanged

    private void cbxMeanFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMeanFilterItemStateChanged
        if (cbxMeanFilter.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            MeanFilter.avrFiltering(g);
            processImg = g;
            showProcessImg();
            afterProcess("均值滤波器", g, 13, "");

        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxMeanFilterItemStateChanged

    private void cbxMedianFilterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMedianFilterItemStateChanged

        if (cbxMedianFilter.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            MedianFilter.medianFiltering(g);
            processImg = g;
            showProcessImg();
            afterProcess("中值滤波器", g, 14, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxMedianFilterItemStateChanged

    private void cbxSymmetricalNeighborMeanFilteringItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSymmetricalNeighborMeanFilteringItemStateChanged
        if (cbxSymmetricalNeighborMeanFiltering.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            SymmetricalNeighborMeanFiltering.snnFiltering(g);
            processImg = g;
            showProcessImg();
            afterProcess("对称近邻均值滤波", g, 20, "");

        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxSymmetricalNeighborMeanFilteringItemStateChanged

    private void cbxAlgorithm1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxAlgorithm1ItemStateChanged
        if (cbxAlgorithm1.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            CleanLines1.cleanLinesInImage(g);
            processImg = g;
            showProcessImg();
            afterProcess("去除干扰线1", g, 15, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxAlgorithm1ItemStateChanged

    private void cbxSegCfgItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxSegCfgItemStateChanged

        if (cbxSegCfg.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            ArrayList<BufferedImage> imageList = SegCfg.test(g);
            delNosePoint(imageList);
            if (imageList.size() == num) {
                subImgList = imageList;
                showSegImage(num);
            } else {
                ArrayList<Integer> max;
                ArrayList<BufferedImage> subList = new ArrayList<BufferedImage>();
                SegWaterDrop segWaterDrop = new SegWaterDrop();
                for (BufferedImage img : imageList) {
                    ArrayList<BufferedImage> tmpList = segWaterDrop.drop(img);
                    for (BufferedImage sumImg : tmpList) {
                        subList.add(sumImg);
                    }
                }
                max = sortSegImgList(subList);
                ArrayList<BufferedImage> rList = new ArrayList<BufferedImage>();
                for (int x = 0; x < max.size(); x++) {
                    rList.add(ImageUtil.scaleImage(subList.get(max.get(x))));
                }
                subImgList = rList;
                showSegImage(num);
            }
            afterProcess("CFS连通域切割", null, 18, "");
        } else {
            cancelMethod();
        }
    }//GEN-LAST:event_cbxSegCfgItemStateChanged

    private void rbtnGrayRItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayRItemStateChanged
        if (rbtnGrayR.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            RgbGray.gray(g, 1);
            processImg = g;
            showProcessImg();
            afterProcess("分量法灰度化R", g, 2, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayRItemStateChanged

    private void rbtnGrayGItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayGItemStateChanged
        if (rbtnGrayG.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            RgbGray.gray(g, 2);
            processImg = g;
            showProcessImg();
            afterProcess("分量法灰度化G", g, 3, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayGItemStateChanged

    private void rbtnGrayBItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayBItemStateChanged
        if (rbtnGrayB.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            RgbGray.gray(g, 3);
            processImg = g;
            showProcessImg();
            afterProcess("分量法灰度化B", g, 4, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayBItemStateChanged

    private void cbxSimpleSubActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSimpleSubActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSimpleSubActionPerformed

    private void rbtnGrayAverageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayAverageItemStateChanged
        if (rbtnGrayAverage.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            AverageGray.gray(g);
            processImg = g;
            showProcessImg();
            afterProcess("平均值灰度化", g, 6, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayAverageItemStateChanged

    private void rbtnGrayAverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnGrayAverageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbtnGrayAverageActionPerformed

    private void rbtnGrayMaxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayMaxItemStateChanged
        if (rbtnGrayMax.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            MaxGray.gray(g);
            processImg = g;
            showProcessImg();
            afterProcess("最大值法灰度化", g, 5, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayMaxItemStateChanged

    private void rbtnGrayWeightedAverageItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rbtnGrayWeightedAverageItemStateChanged
        if (rbtnGrayWeightedAverage.isSelected()) {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            double rw = Double.parseDouble(txtRValue.getText().trim());
            double gw = Double.parseDouble(txtGValue.getText().trim());
            double bw = Double.parseDouble(txtBValue.getText().trim());
            if (rw + gw + bw != 1) {
                rw = 0.299;
                gw = 0.587;
                bw = 0.114;
            }
            WeightedAverageGray.gray(g, rw, gw, bw);
            processImg = g;
            showProcessImg();
            String s = String.valueOf(rw) + ":" + String.valueOf(gw) + ":" + String.valueOf(bw);
            afterProcess("加权平均值法灰度化", g, 7, s);

        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_rbtnGrayWeightedAverageItemStateChanged

    private void cbxNiBlackItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxNiBlackItemStateChanged

        if (cbxNiBlack.isSelected()) {
            beforeProcess();
            double k = Double.parseDouble(txtNiBlackK.getText().trim());
            int w = Integer.parseInt(txtNiBlackW.getText().trim());
            BufferedImage g = deepCopy(processImg);
            NiBlackAlgorithm.getBinaryImage(g, k, w);
            processImg = g;
            showProcessImg();
            String s = String.valueOf(k) + ":" + String.valueOf(w);
            afterProcess("NiBlack算法二值化", g, 10, s);

        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxNiBlackItemStateChanged

    private void cbxBersenItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxBersenItemStateChanged
        // TODO add your handling code here:
        if (cbxBersen.isSelected()) {
            beforeProcess();
            //double k=Double.parseDouble(txtKvalue.getText().trim());
            int w = Integer.parseInt(txtBersenW.getText().trim());
            BufferedImage g = deepCopy(processImg);
            BersenAlgorithm.getBinaryImage(g, w);
            processImg = g;
            showProcessImg();
            String s = String.valueOf(w);
            afterProcess("Bersen算法二值化", g, 11, s);
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxBersenItemStateChanged

    private void cbkSauvolaItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbkSauvolaItemStateChanged

        if (cbkSauvola.isSelected()) {
            beforeProcess();
            double k = Double.parseDouble(txtSauvolaK.getText().trim());
            int w = Integer.parseInt(txtSauvolaW.getText().trim());
            BufferedImage g = deepCopy(processImg);
            SauvolaAlgorithm.getBinaryImage(g, k, w);
            processImg = g;
            showProcessImg();
            String s = String.valueOf(k) + ":" + String.valueOf(w);
            afterProcess("Sauvola算法二值化", g, 12, s);
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbkSauvolaItemStateChanged

    private void cbxIterationItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxIterationItemStateChanged
        // TODO add your handling code here:
        if (cbxIteration.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            IterationAlgorithm.getBinaryImage(g);
            processImg = g;
            showProcessImg();
            afterProcess("循环阈值算法", g, 9, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_cbxIterationItemStateChanged

    private void jCheckBox2ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox2ItemStateChanged
        if (jCheckBox2.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            //IterationAlgorithm.getBinaryImage(g);
            CorrodeAndExpend.expend(g);
            processImg = g;
            showProcessImg();
            afterProcess("膨胀算法", g, 16, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox2ItemStateChanged

    private void jCheckBox3ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCheckBox3ItemStateChanged
        // TODO add your handling code here:
        if (jCheckBox3.isSelected()) // if check box is checked
        {
            beforeProcess();
            BufferedImage g = deepCopy(processImg);
            //IterationAlgorithm.getBinaryImage(g);
            CorrodeAndExpend.corrode(g);
            processImg = g;
            showProcessImg();
            afterProcess("腐蚀算法", g, 17, "");
        } else {
            cancelMethod();
            beforeProcess();
            showProcessImg();
        }
    }//GEN-LAST:event_jCheckBox3ItemStateChanged

    private void btnRestoreImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnRestoreImgMouseClicked

        this.processImg = this.srcImg;
        showProcessImg();
    }//GEN-LAST:event_btnRestoreImgMouseClicked

    private void btnReadNextImgMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReadNextImgMouseClicked
        if (predictResult != null) {
            String change = txtPredictResult.getText().trim();
            char[] changePredict = change.toCharArray();
            if (!Arrays.equals(predictResult, changePredict) && (predictResult.length == changePredict.length)) {
                System.out.println("训练：");
                for (int i = 0; i < predictResult.length; i++) {
                    if (predictResult[i] != changePredict[i]) {
                        Train t = new Train(fontName, changePredict[i], subImgList.get(i));
                        try {
                            if (cbxRealTimeTrain.isSelected()) {
                                Train.run(fontName);
                            }
                        } catch (IOException e) {
                            e.printStackTrace();
                        }

                    }
                }
            }
        }
        if (this.imgFiles != null) {
            int no = 0;
            if (this.imgFiles.length > 0) {
                this.imgNo++;
                no = this.imgNo % this.imgFiles.length;
                try {
                    this.srcImg = ImageIO.read(this.imgFiles[no]);
                    this.processImg = ImageIO.read(this.imgFiles[no]);
                    showSrcImg();
                    if (configFlag == 1) {
                        processI();
                    }
                    showProcessImg();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
            while (!this.processMethod.isEmpty()) {
                this.processMethod.pop();
            }
            lblNumber.setText(String.valueOf(this.imgFiles.length) + "/" + String.valueOf(no));
        } else {

        }
        txtPredictResult.requestFocus();
    }//GEN-LAST:event_btnReadNextImgMouseClicked

    public void showCofigMethod() {
        DefaultListModel listMethod = new DefaultListModel();
        for (int i = 0; i < nMethod.size(); i++) {
            switch (nMethod.get(i).method) {
                case 1: {
                    listMethod.addElement("简单裁剪");
                    break;
                }
                case 2: {
                    listMethod.addElement("分量法灰度化R");
                    break;
                }
                case 3: {
                    listMethod.addElement("分量法灰度化G");
                    break;
                }
                case 4: {
                    listMethod.addElement("分量法灰度化B");
                    break;
                }
                case 5: {
                    listMethod.addElement("最大值法灰度化");
                    break;
                }
                case 6: {
                    listMethod.addElement("平均值灰度化");
                    break;
                }
                case 7: {
                    listMethod.addElement("加权平均值法灰度化");
                    break;
                }
                case 8: {
                    listMethod.addElement("大津算法");
                    break;
                }
                case 9: {
                    listMethod.addElement("循环阈值算法");
                    break;
                }
                case 10: {
                    listMethod.addElement("NiBlack算法二值化");
                    break;
                }
                case 11: {
                    listMethod.addElement("Bersen算法二值化");
                    break;
                }
                case 12: {
                    listMethod.addElement("Sauvola算法二值化");
                    break;
                }
                case 13: {
                    listMethod.addElement("均值滤波器");
                    break;
                }
                case 14: {
                    listMethod.addElement("中值滤波器");
                    break;
                }
                case 15: {
                    listMethod.addElement("去除干扰线1");
                    break;
                }

                case 16: {
                    listMethod.addElement("膨胀算法");
                    break;
                }
                case 17: {
                    listMethod.addElement("腐蚀算法");
                    break;
                }
                case 18: {
                    listMethod.addElement("CFS连通域切割");
                    break;
                }
                case 19: {
                    listMethod.addElement("FCM模糊C均值");
                    break;
                }
                case 20: {
                    listMethod.addElement("对称近邻均值滤波");
                    break;
                }
            }
        }
        jList1.setModel(listMethod);
    }

    public void processI() {
        for (int i = 0; i < nMethod.size(); i++) {
            switch (nMethod.get(i).method) {
                case 1: {
                    processImg = processImg.getSubimage(1, 1, processImg.getWidth() - 1 * 2, processImg.getHeight() - 1 * 2);
                    try {
                        ImageIO.write(processImg, "JPEG", new File("tmp.jpg"));
                        processImg = ImageIO.read(new File("tmp.jpg"));
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    break;
                }
                case 2: {
                    RgbGray.gray(processImg, 1);
                    break;
                }
                case 3: {
                    RgbGray.gray(processImg, 2);
                    break;
                }
                case 4: {
                    RgbGray.gray(processImg, 3);
                    break;
                }
                case 5: {
                    MaxGray.gray(processImg);
                    break;
                }
                case 6: {
                    AverageGray.gray(processImg);
                    break;
                }
                case 7: {
                    String[] wag = nMethod.get(i).value.split(":");
                    double rw = Double.parseDouble(wag[0]);
                    double gw = Double.parseDouble(wag[1]);
                    double bw = Double.parseDouble(wag[2]);
                    WeightedAverageGray.gray(processImg, rw, gw, bw);
                    break;
                }
                case 8: {
                    OtsuAlgorithm.getBinaryImage(processImg);
                    break;
                }
                case 9: {
                    IterationAlgorithm.getBinaryImage(processImg);
                    break;
                }
                case 10: {
                    String[] na = nMethod.get(i).value.split(":");
                    double k = Double.parseDouble(na[0]);
                    int w = Integer.parseInt(na[1]);
                    NiBlackAlgorithm.getBinaryImage(processImg, k, w);
                    break;
                }
                case 11: {
                    int w = Integer.parseInt(nMethod.get(i).value);
                    BersenAlgorithm.getBinaryImage(processImg, w);
                    break;
                }
                case 12: {
                    String[] sa = nMethod.get(i).value.split(":");
                    double k = Double.parseDouble(sa[0]);
                    int w = Integer.parseInt(sa[1]);
                    SauvolaAlgorithm.getBinaryImage(processImg, k, w);
                    break;
                }
                case 13: {
                    MeanFilter.avrFiltering(processImg);
                    break;
                }
                case 14: {
                    SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                    break;
                }
                case 15: {
                    CleanLines1.cleanLinesInImage(processImg);
                    break;
                }

                case 16: {
                    CorrodeAndExpend.expend(processImg);
                    break;
                }
                case 17: {
                    CorrodeAndExpend.corrode(processImg);
                    break;
                }
                case 18: {
                    ArrayList<BufferedImage> imageList = SegCfg.test(processImg);
                    delNosePoint(imageList);
                    if (imageList.size() == num) {
                        subImgList = imageList;
                        showSegImage(num);
                    } else {
                        ArrayList<Integer> max;
                        ArrayList<BufferedImage> subList = new ArrayList<BufferedImage>();
                        SegWaterDrop segWaterDrop = new SegWaterDrop();
                        for (BufferedImage img : imageList) {
                            ArrayList<BufferedImage> tmpList = segWaterDrop.drop(img);
                            for (BufferedImage sumImg : tmpList) {
                                subList.add(sumImg);
                            }
                        }
                        max = sortSegImgList(subList);
                        ArrayList<BufferedImage> rList = new ArrayList<BufferedImage>();
                        for (int x = 0; x < max.size(); x++) {
                            rList.add(ImageUtil.scaleImage(subList.get(max.get(x))));
                        }
                        subImgList = rList;
                        showSegImage(num);

                    }
                    break;
                }
                case 19: {
                    int e = Integer.parseInt(txtFCMexponent.getText().trim());
                    int ix = Integer.parseInt(txtFCMiternum.getText().trim());
                    if (e < 2 || e > 6) {
                        e = 2;
                    }
                    if (ix < 1 || ix > 100) {
                        ix = 50;
                    }
                    ArrayList<BufferedImage> fcmList = new ArrayList<BufferedImage>();
                    ArrayList<BufferedImage> imageList = FCMAlgorithm.test(processImg, e, ix, num);
                    for (BufferedImage sumImg : imageList) {
                        sumImg = ScanCut.cut(sumImg, 3);
                        fcmList.add(ImageUtil.scaleImage(sumImg));
                    }
                    subImgList = fcmList;
                    showSegImage(num);
                    break;
                }
                case 20: {
                    SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                    break;
                }
            }
        }
    }
    private void btnReadFilesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadFilesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnReadFilesActionPerformed

    private void btnReadFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnReadFilesMouseClicked

        String path = txtImgPath.getText().trim();
        if ("".equals(path)) {//判断是否存在图片路径
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                txtImgPath.setText(file.getAbsolutePath());
            }
        }
        this.imgPath = txtImgPath.getText().trim();
        this.readImags();
        if (this.imgFiles.length > 0) {
            try {
                this.srcImg = this.processImg = ImageIO.read(this.imgFiles[0]);
                this.showSrcImg();
                showProcessImg();
            } catch (IOException e) {
                e.printStackTrace();
            }
            //binaryImage(0);
        }
        lblNumber.setText(String.valueOf(this.imgFiles.length) + "/0");
    }//GEN-LAST:event_btnReadFilesMouseClicked

    private void cbxFCMItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxFCMItemStateChanged
        // TODO add your handling code here:
        if (cbxFCM.isSelected()) // if check box is checked
        {
            int e = Integer.parseInt(txtFCMexponent.getText().trim());
            int i = Integer.parseInt(txtFCMiternum.getText().trim());
            if (e < 2 || e > 6) {
                e = 2;
            }
            if (i < 1 || i > 100) {
                i = 50;
            }
            ArrayList<BufferedImage> fcmList = new ArrayList<BufferedImage>();
            ArrayList<BufferedImage> imageList = FCMAlgorithm.test(processImg, e, i, num);
            /* try {
                for (int j = 0; j < imageList.size(); j++) {
                    BufferedImage subImg = imageList.get(j);
                    String filename = "seg/" + "s" + "-" + j + ".jpg";
                    ImageIO.write(subImg, "JPG", new File(filename));
                }
            } catch (IOException e2) {
                e2.printStackTrace();
            }*/

            for (BufferedImage sumImg : imageList) {
                fcmList.add(ImageUtil.scaleImage(sumImg));
            }
            subImgList = fcmList;
            showSegImage(num);
            afterProcess("FCM模糊C均值", null, 19, "");
        } else {
            cancelMethod();
        }
    }//GEN-LAST:event_cbxFCMItemStateChanged

    private void spinnerNumStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spinnerNumStateChanged
        // TODO add your handling code here:
        num = (int) spinnerNum.getValue();
        switch (num) {
            case 1:
                txtPredictResult.setText("-");
                break;
            case 2:
                txtPredictResult.setText("--");
                break;
            case 3:
                txtPredictResult.setText("---");
                break;
            case 4:
                txtPredictResult.setText("----");
                break;
            case 5:
                txtPredictResult.setText("-----");
                break;
            case 6:
                txtPredictResult.setText("------");
                break;
            case 7:
                txtPredictResult.setText("-------");
                break;
            case 8:
                txtPredictResult.setText("--------");
                break;
        }

    }//GEN-LAST:event_spinnerNumStateChanged

    private void btnCreateNewFontMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCreateNewFontMouseClicked
        // TODO add your handling code here:
        String name = txtFontName.getText().trim();
        int type = 0;
        if (rbtnNum.isSelected() || rbtnLetter.isSelected() || rbtnCapitals.isSelected() || rbtnNumLetter.isSelected() || rbtnNumCapitals.isSelected()) {
            if ("".equals(name)) {
                JOptionPane.showMessageDialog(null, "请填写字库名称");
                txtFontName.requestFocus();
                return;
            } else {

                fontName = fontPath + "/" + name;
                if ((new File(fontName)).exists()) {
                    JOptionPane.showMessageDialog(null, "已存在该字库");
                    return;
                } else {
                    System.out.println(fontName);
                    new File(fontName).mkdir();
                }

                if (rbtnNum.isSelected()) {
                    type = 1;
                }
                if (rbtnLetter.isSelected()) {
                    type = 2;
                }
                if (rbtnCapitals.isSelected()) {
                    type = 3;
                }
                if (rbtnNumLetter.isSelected()) {
                    type = 4;
                }
                if (rbtnNumCapitals.isSelected()) {
                    type = 5;
                }
                makeFont(type);
                JOptionPane.showMessageDialog(null, "创建字库成功！");
                txtFontName.setEditable(false);
                File t = new File(fontName);
                jLabel11.setText(t.getName());
                fontFlag = 1;
            }
        } else {
            JOptionPane.showMessageDialog(null, "请选择验证码类型");
        }
    }//GEN-LAST:event_btnCreateNewFontMouseClicked

    public void makeFont(int type) {
        int start = 0;
        int end = 61;
        switch (type) {
            case 1: {
                start = 0;
                end = 9;
                break;
            }

            case 2: {
                start = 10;
                end = 35;
                break;
            }
            case 3: {
                start = 10;
                end = 61;
                break;
            }
            case 4: {
                start = 0;
                end = 35;
                break;
            }
            case 5: {
                start = 0;
                end = 61;
                break;
            }
        }
        FileWriter writer = null;
        try {

            writer = new FileWriter(new File(fontName + "/label.txt"));

            String charactor = "1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
            for (int i = start; i < end + 1; i++) {
                char c = charactor.charAt(i);
                String str = c + " " + (i + 1) + "\r\n";
                writer.write(str);
            }
            writer.flush();

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (writer != null) {
                try {
                    writer.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }

        File result = new File(fontName + "/result.txt");
        File smodel = new File(fontName + "/svm.model");
        File stest = new File(fontName + "/svm.test");
        File stran = new File(fontName + "/svm.train");

        try {
            result.createNewFile();
            smodel.createNewFile();
            stest.createNewFile();
            stran.createNewFile();
            BufferedWriter out = new BufferedWriter(new FileWriter(stran));
            out.write("6 1:0 2:0 3:0 4:0 5:1 6:1 7:1 8:1 9:1 10:1 11:0 12:0 13:0 14:0 15:0 16:0 17:0 18:0 19:0 20:0 21:0 22:1 23:1 24:1 25:1 26:1 27:1 28:1 29:1 30:1 31:1 32:1 33:0 34:0 35:0 36:0 37:0 38:0 39:1 40:1 41:1 42:1 43:1 44:1 45:1 46:1 47:1 48:1 49:1 50:1 51:1 52:1 53:0 54:0 55:0 56:0 57:1 58:1 59:1 60:1 61:1 62:1 63:1 64:1 65:1 66:1 67:1 68:1 69:1 70:1 71:1 72:0 73:0 74:0 75:1 76:1 77:1 78:1 79:1 80:1 81:1 82:0 83:0 84:1 85:1 86:1 87:1 88:1 89:1 90:1 91:0 92:1 93:1 94:1 95:1 96:1 97:1 98:1 99:0 100:0 101:0 102:0 103:1 104:1 105:1 106:1 107:1 108:1 109:0 110:1 111:1 112:1 113:1 114:1 115:1 116:1 117:0 118:0 119:0 120:0 121:1 122:1 123:1 124:1 125:1 126:1 127:0 128:1 129:1 130:1 131:1 132:1 133:1 134:1 135:0 136:0 137:0 138:0 139:0 140:1 141:1 142:1 143:1 144:1 145:0 146:1 147:1 148:1 149:1 150:1 151:1 152:0 153:0 154:0 155:0 156:0 157:0 158:0 159:1 160:1 161:1 162:1 163:1 164:1 165:1 166:1 167:1 168:1 169:1 170:1 171:1 172:1 173:1 174:1 175:0 176:0 177:0 178:0 179:0 180:0 181:1 182:1 183:1 184:1 185:1 186:1 187:1 188:1 189:1 190:1 191:1 192:1 193:1 194:1 195:0 196:0 197:0 198:0 199:1 200:1 201:1 202:1 203:1 204:1 205:1 206:1 207:0 208:0 209:1 210:1 211:1 212:1 213:1 214:0 215:0 216:0 217:1 218:1 219:1 220:1 221:1 222:1 223:1 224:0 225:0 226:0 227:1 228:1 229:1 230:1 231:1 232:1 233:0 234:0 235:1 236:1 237:1 238:1 239:1 240:1 241:0 242:0 243:0 244:0 245:1 246:1 247:1 248:1 249:1 250:1 251:0 252:0 253:1 254:1 255:1 256:1 257:1 258:1 259:0 260:0 261:0 262:0 263:1 264:1 265:1 266:1 267:1 268:1 269:0 270:0 271:1 272:1 273:1 274:1 275:1 276:1 277:0 278:0 279:0 280:1 281:1 282:1 283:1 284:1 285:1 286:1 287:0 288:0 289:1 290:1 291:1 292:1 293:1 294:1 295:1 296:0 297:0 298:1 299:1 300:1 301:1 302:1 303:1 304:1 305:0 306:0 307:1 308:1 309:1 310:1 311:1 312:1 313:1 314:1 315:1 316:1 317:1 318:1 319:1 320:1 321:1 322:1 323:0 324:0 325:0 326:1 327:1 328:1 329:1 330:1 331:1 332:1 333:1 334:1 335:1 336:1 337:1 338:1 339:1 340:0 341:0 342:0 343:0 344:0 345:1 346:1 347:1 348:1 349:1 350:1 351:1 352:1 353:1 354:1 355:1 356:1 357:1 358:0 359:0 360:0 361:0 362:0 363:0 364:0 365:0 366:1 367:1 368:1 369:1 370:1 371:1 372:1 373:1 374:1 375:0 376:0 377:0 378:0 \r\n");
            out.flush(); // 把缓存区内容压入文件  
            out.close();
            //Train t = new Train(fontName,'6', null);
            Train.run(fontName);
        } catch (IOException e) {
            e.printStackTrace();
        }

    }


    private void btnOpenFontMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnOpenFontMouseClicked
        // TODO add your handling code here:

        JFileChooser fileChooser = new JFileChooser("Font");
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int r = fileChooser.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            fontName = file.getAbsolutePath();
        }

        label = new File(fontName + "/label.txt");
        result = new File(fontName + "/result.txt");
        model = new File(fontName + "/svm.model");
        test = new File(fontName + "/svm.test");
        train = new File(fontName + "/svm.train");

        if (!(label.exists() && result.exists() && model.exists() && test.exists() && train.exists())) {
            JOptionPane.showMessageDialog(null, "字库打开错误！");
            return;
        }
        fontFlag = 1;
        File p = new File(fontName + "/config.txt");

        if (p.exists()) {
            WRConfig c = new WRConfig();
            num = c.readConfig(fontName, nMethod);
            spinnerNum.setValue(num);
            configFlag = 1;
            showCofigMethod();
        }
        File t = new File(fontName);
        jLabel11.setText(t.getName());
    }//GEN-LAST:event_btnOpenFontMouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        // TODO add your handling code here:
        if (fontFlag == 0) {
            JOptionPane.showMessageDialog(null, "请先新建或载入一个字库！");
            return;
        }
        WRConfig w = new WRConfig();
        w.writeConfig(fontName, num, nMethod);
        configFlag = 1;
    }//GEN-LAST:event_jButton3MouseClicked

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
        try {
            Train.run(fontName);
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    }//GEN-LAST:event_jButton1MouseClicked

    private void txtPredictResultKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPredictResultKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) //判断按下的键是否是回车键
        {
            btnReadNextImgMouseClicked(null);
            //JOptionPane.showMessageDialog(null, "回车");
        }
    }//GEN-LAST:event_txtPredictResultKeyPressed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        nMethod.clear();
        showMethod();
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        // TODO add your handling code here:
        double success = 0;
        double all = 0;
        double successRate = 0;
        if (!fontName.equals("") && (configFlag == 1)) {
            String batchPath = "";
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                batchPath = file.getAbsolutePath();
            }
            File bathImgFiles[] = (new File(batchPath)).listFiles(new FilenameFilter() {
                public boolean isJpg(String file) {
                    if (file.toLowerCase().endsWith(".jpg")) {
                        return true;
                    } else {
                        return false;
                    }
                }

                @Override
                public boolean accept(File dir, String name) {
                    return isJpg(name);
                }
            });
            long startTime = System.currentTimeMillis();//程序开始记录时间
            all = bathImgFiles.length;
            for (int j = 0; j < bathImgFiles.length; j++) {
                try {
                    this.processImg = ImageIO.read(bathImgFiles[j]);
                    String[] name = bathImgFiles[j].getName().split("\\.");
                    for (int i = 0; i < nMethod.size(); i++) {
                        switch (nMethod.get(i).method) {
                            case 1: {
                                processImg = processImg.getSubimage(1, 1, processImg.getWidth() - 1 * 2, processImg.getHeight() - 1 * 2);
                                try {
                                    ImageIO.write(processImg, "JPEG", new File("tmp.jpg"));
                                    processImg = ImageIO.read(new File("tmp.jpg"));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                break;
                            }
                            case 2: {
                                RgbGray.gray(processImg, 1);
                                break;
                            }
                            case 3: {
                                RgbGray.gray(processImg, 2);
                                break;
                            }
                            case 4: {
                                RgbGray.gray(processImg, 3);
                                break;
                            }
                            case 5: {
                                MaxGray.gray(processImg);
                                break;
                            }
                            case 6: {
                                AverageGray.gray(processImg);
                                break;
                            }
                            case 7: {
                                String[] wag = nMethod.get(i).value.split(":");
                                double rw = Double.parseDouble(wag[0]);
                                double gw = Double.parseDouble(wag[1]);
                                double bw = Double.parseDouble(wag[2]);
                                WeightedAverageGray.gray(processImg, rw, gw, bw);
                                break;
                            }
                            case 8: {
                                OtsuAlgorithm.getBinaryImage(processImg);
                                break;
                            }
                            case 9: {
                                IterationAlgorithm.getBinaryImage(processImg);
                                break;
                            }
                            case 10: {
                                String[] na = nMethod.get(i).value.split(":");
                                double k = Double.parseDouble(na[0]);
                                int w = Integer.parseInt(na[1]);
                                NiBlackAlgorithm.getBinaryImage(processImg, k, w);
                                break;
                            }
                            case 11: {
                                int w = Integer.parseInt(nMethod.get(i).value);
                                BersenAlgorithm.getBinaryImage(processImg, w);
                                break;
                            }
                            case 12: {
                                String[] sa = nMethod.get(i).value.split(":");
                                double k = Double.parseDouble(sa[0]);
                                int w = Integer.parseInt(sa[1]);
                                SauvolaAlgorithm.getBinaryImage(processImg, k, w);
                                break;
                            }
                            case 13: {
                                MeanFilter.avrFiltering(processImg);
                                break;
                            }
                            case 14: {
                                SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                                break;
                            }
                            case 15: {
                                CleanLines1.cleanLinesInImage(processImg);
                                break;
                            }

                            case 16: {
                                CorrodeAndExpend.expend(processImg);
                                break;
                            }
                            case 17: {
                                CorrodeAndExpend.corrode(processImg);
                                break;
                            }
                            case 18: {
                                ArrayList<BufferedImage> imageList = SegCfg.test(processImg);
                                delNosePoint(imageList);
                                if (imageList.size() == num) {
                                    subImgList = imageList;
                                    showSegImage(num);
                                } else {
                                    ArrayList<Integer> max;
                                    ArrayList<BufferedImage> subList = new ArrayList<BufferedImage>();
                                    SegWaterDrop segWaterDrop = new SegWaterDrop();
                                    for (BufferedImage img : imageList) {
                                        ArrayList<BufferedImage> tmpList = segWaterDrop.drop(img);
                                        for (BufferedImage sumImg : tmpList) {
                                            subList.add(sumImg);
                                        }
                                    }
                                    if (subList.size() < num) {
                                        break;
                                    }
                                    max = sortSegImgList(subList);
                                    ArrayList<BufferedImage> rList = new ArrayList<BufferedImage>();
                                    for (int x = 0; x < max.size(); x++) {
                                        rList.add(ImageUtil.scaleImage(subList.get(max.get(x))));
                                    }
                                    subImgList = rList;
                                    try {
                                        Identy identy = new Identy(fontName);
                                        String r = identy.predict(subImgList);
                                        predictResult = r.toCharArray();
                                        char[] changePredict = name[0].toCharArray();
                                        if (!Arrays.equals(predictResult, changePredict) && (predictResult.length == changePredict.length)) {
                                            for (int k = 0; k < predictResult.length; k++) {
                                                if (predictResult[k] != changePredict[k]) {
                                                    Train t = new Train(fontName, changePredict[k], subImgList.get(k));
                                                }
                                            }
                                        }
                                        if (Arrays.equals(predictResult, changePredict)) {
                                            success++;
                                        }
                                    } catch (IOException e1) {
                                        e1.printStackTrace();
                                    }

                                }
                                break;
                            }
                            case 19: {
                                int e = Integer.parseInt(txtFCMexponent.getText().trim());
                                int ix = Integer.parseInt(txtFCMiternum.getText().trim());
                                if (e < 2 || e > 6) {
                                    e = 2;
                                }
                                if (ix < 1 || ix > 100) {
                                    ix = 50;
                                }
                                ArrayList<BufferedImage> fcmList = new ArrayList<BufferedImage>();
                                ArrayList<BufferedImage> imageList = FCMAlgorithm.test(processImg, e, ix, num);
                                for (BufferedImage sumImg : imageList) {
                                    fcmList.add(ImageUtil.scaleImage(sumImg));
                                }
                                subImgList = fcmList;
                                try {
                                    Identy identy = new Identy(fontName);
                                    String r = identy.predict(subImgList);
                                    predictResult = r.toCharArray();
                                    char[] changePredict = name[0].toCharArray();
                                    if (!Arrays.equals(predictResult, changePredict) && (predictResult.length == changePredict.length)) {
                                        for (int k = 0; k < predictResult.length; k++) {
                                            if (predictResult[k] != changePredict[k]) {
                                                Train t = new Train(fontName, changePredict[k], subImgList.get(k));
                                            }
                                        }
                                    }
                                    if (Arrays.equals(predictResult, changePredict)) {
                                        success++;
                                    }
                                } catch (IOException e1) {
                                    e1.printStackTrace();
                                }
                                break;
                            }
                            case 20: {
                                SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                                break;
                            }
                        }
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
            try {
                Train.run(fontName);
            } catch (IOException e) {
                e.printStackTrace();
            }
            long endTime = System.currentTimeMillis(); //程序结束记录时间
            long TotalTime = (endTime - startTime) / (1000 * 60); //总消耗时间
            successRate = success / all;
            System.out.println(success);
            System.out.println(all);
            System.out.println(successRate);
            JOptionPane.showMessageDialog(null, "耗时：" + TotalTime + "分");
        }
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseClicked
        // TODO add your handling code here:

        String D_CFS_SC = currentPath + "/CFS_SC";
        String D_FCM_SC = currentPath + "/FCM_SC";
        if (!((new File(D_CFS_SC)).exists())) {
            new File(D_CFS_SC).mkdir();
            System.out.println("mkdir");
        }
        if (!((new File(D_FCM_SC)).exists())) {
            new File(D_FCM_SC).mkdir();
        }
        double success = 0;
        double all = 0;
        double successRate = 0;
        if (!fontName.equals("") && (configFlag == 1)) {
            String batchPath = "";
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                batchPath = file.getAbsolutePath();
            }
            File bathImgFiles[] = (new File(batchPath)).listFiles(new FilenameFilter() {
                public boolean isJpg(String file) {
                    if (file.toLowerCase().endsWith(".jpg")) {
                        return true;
                    } else {
                        return false;
                    }
                }

                @Override
                public boolean accept(File dir, String name) {
                    return isJpg(name);
                }
            });
            long startTime = System.currentTimeMillis();//程序开始记录时间
            all = bathImgFiles.length;
            for (int j = 0; j < bathImgFiles.length; j++) {
                try {
                    this.processImg = ImageIO.read(bathImgFiles[j]);
                    String[] name = bathImgFiles[j].getName().split("\\.");
                    for (int i = 0; i < nMethod.size(); i++) {
                        switch (nMethod.get(i).method) {
                            case 1: {
                                processImg = processImg.getSubimage(1, 1, processImg.getWidth() - 1 * 2, processImg.getHeight() - 1 * 2);
                                try {
                                    ImageIO.write(processImg, "JPEG", new File("tmp.jpg"));
                                    processImg = ImageIO.read(new File("tmp.jpg"));
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                break;
                            }
                            case 2: {
                                RgbGray.gray(processImg, 1);
                                break;
                            }
                            case 3: {
                                RgbGray.gray(processImg, 2);
                                break;
                            }
                            case 4: {
                                RgbGray.gray(processImg, 3);
                                break;
                            }
                            case 5: {
                                MaxGray.gray(processImg);
                                break;
                            }
                            case 6: {
                                AverageGray.gray(processImg);
                                break;
                            }
                            case 7: {
                                String[] wag = nMethod.get(i).value.split(":");
                                double rw = Double.parseDouble(wag[0]);
                                double gw = Double.parseDouble(wag[1]);
                                double bw = Double.parseDouble(wag[2]);
                                WeightedAverageGray.gray(processImg, rw, gw, bw);
                                break;
                            }
                            case 8: {
                                OtsuAlgorithm.getBinaryImage(processImg);
                                break;
                            }
                            case 9: {
                                IterationAlgorithm.getBinaryImage(processImg);
                                break;
                            }
                            case 10: {
                                String[] na = nMethod.get(i).value.split(":");
                                double k = Double.parseDouble(na[0]);
                                int w = Integer.parseInt(na[1]);
                                NiBlackAlgorithm.getBinaryImage(processImg, k, w);
                                break;
                            }
                            case 11: {
                                int w = Integer.parseInt(nMethod.get(i).value);
                                BersenAlgorithm.getBinaryImage(processImg, w);
                                break;
                            }
                            case 12: {
                                String[] sa = nMethod.get(i).value.split(":");
                                double k = Double.parseDouble(sa[0]);
                                int w = Integer.parseInt(sa[1]);
                                SauvolaAlgorithm.getBinaryImage(processImg, k, w);
                                break;
                            }
                            case 13: {
                                MeanFilter.avrFiltering(processImg);
                                break;
                            }
                            case 14: {
                                SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                                break;
                            }
                            case 15: {
                                CleanLines1.cleanLinesInImage(processImg);
                                break;
                            }

                            case 16: {
                                CorrodeAndExpend.expend(processImg);
                                break;
                            }
                            case 17: {
                                CorrodeAndExpend.corrode(processImg);
                                break;
                            }
                            case 18: {
                                ArrayList<BufferedImage> imageList = SegCfg.test(processImg);
                                delNosePoint(imageList);
                                if (imageList.size() == num) {
                                    subImgList = imageList;
                                    showSegImage(num);
                                } else {
                                    ArrayList<Integer> max;
                                    ArrayList<BufferedImage> subList = new ArrayList<BufferedImage>();
                                    SegWaterDrop segWaterDrop = new SegWaterDrop();
                                    for (BufferedImage img : imageList) {
                                        ArrayList<BufferedImage> tmpList = segWaterDrop.drop(img);
                                        for (BufferedImage sumImg : tmpList) {
                                            subList.add(sumImg);
                                        }
                                    }
                                    if (subList.size() < num) {
                                        break;
                                    }
                                    max = sortSegImgList(subList);
                                    ArrayList<BufferedImage> rList = new ArrayList<BufferedImage>();
                                    for (int x = 0; x < max.size(); x++) {
                                        rList.add(ImageUtil.scaleImage(subList.get(max.get(x))));
                                    }
                                    subImgList = rList;
                                    try {
                                        char[] changePredict = name[0].toCharArray();
                                        for (int k = 0; k < subImgList.size(); k++) {
                                            BufferedImage subImg = subImgList.get(k);
                                            String filename = D_CFS_SC + "/" + i + "-" + j + "-" + changePredict[k] + ".jpg";
                                            ImageIO.write(subImg, "JPG", new File(filename));
                                        }

                                    } catch (IOException e1) {
                                        e1.printStackTrace();
                                    }

                                }
                                break;
                            }
                            case 19: {
                                int e = Integer.parseInt(txtFCMexponent.getText().trim());
                                int ix = Integer.parseInt(txtFCMiternum.getText().trim());
                                if (e < 2 || e > 6) {
                                    e = 2;
                                }
                                if (ix < 1 || ix > 100) {
                                    ix = 50;
                                }
                                ArrayList<BufferedImage> fcmList = new ArrayList<BufferedImage>();
                                ArrayList<BufferedImage> imageList = FCMAlgorithm.test(processImg, e, ix, num);
                                for (BufferedImage sumImg : imageList) {
                                    fcmList.add(ImageUtil.scaleImage(sumImg));
                                }
                                subImgList = fcmList;
                                try {
                                    char[] changePredict = name[0].toCharArray();
                                    for (int k = 0; k < subImgList.size(); k++) {
                                        BufferedImage subImg = subImgList.get(k);
                                        String filename = D_FCM_SC + "/" + i + "-" + j + "-" + changePredict[k] + ".jpg";
                                        ImageIO.write(subImg, "JPG", new File(filename));
                                    }
                                } catch (IOException e1) {
                                    e1.printStackTrace();
                                }
                                break;
                            }
                            case 20: {
                                SymmetricalNeighborMeanFiltering.snnFiltering(processImg);
                                break;
                            }
                        }
                    }

                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
            try {
                Train.run(fontName);
            } catch (IOException e) {
                e.printStackTrace();
            }
            long endTime = System.currentTimeMillis(); //程序结束记录时间
            long TotalTime = (endTime - startTime) / (1000 * 60); //总消耗时间
            successRate = success / all;
            System.out.println(success);
            System.out.println(all);
            System.out.println(successRate);
            JOptionPane.showMessageDialog(null, "耗时：" + TotalTime + "分");
        }
    }//GEN-LAST:event_jButton5MouseClicked

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton6MouseClicked

        double success = 0;
        double all = 0;
        double successRate = 0;
        if (!fontName.equals("") && (configFlag == 1)) {
            String batchPath = "";
            JFileChooser fileChooser = new JFileChooser(".");
            fileChooser.setMultiSelectionEnabled(false);
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int result = fileChooser.showOpenDialog(null);
            if (result == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                batchPath = file.getAbsolutePath();
            }
            File bathImgFiles[] = (new File(batchPath)).listFiles(new FilenameFilter() {
                public boolean isJpg(String file) {
                    if (file.toLowerCase().endsWith(".jpg")) {
                        return true;
                    } else {
                        return false;
                    }
                }

                @Override
                public boolean accept(File dir, String name) {
                    return isJpg(name);
                }
            });
            long startTime = System.currentTimeMillis();//程序开始记录时间
            all = bathImgFiles.length;
            for (int j = 0; j < bathImgFiles.length; j++) {
                try {
                    this.processImg = ImageIO.read(bathImgFiles[j]);
                    String[] name = bathImgFiles[j].getName().split("-");
                    char[] changePredict = name[2].toCharArray();
                    Train t = new Train(fontName, changePredict[0], processImg);
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
            try {
                Train.run(fontName);
            } catch (IOException e) {
                e.printStackTrace();
            }
            long endTime = System.currentTimeMillis(); //程序结束记录时间
            long TotalTime = (endTime - startTime) / (1000 * 60); //总消耗时间
            successRate = success / all;
            System.out.println(success);
            System.out.println(all);
            System.out.println(successRate);
            JOptionPane.showMessageDialog(null, "耗时：" + TotalTime + "分");
        }
    }//GEN-LAST:event_jButton6MouseClicked

    public void showSegImage(int n) {
        if (!fontName.equals("")) {
            try {
                Identy identy = new Identy(fontName);
                String r = identy.predict(subImgList);
                predictResult = r.toCharArray();
                txtPredictResult.setText(r);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }
        if (n > subImgList.size()) {
            n = subImgList.size();
        }
        if (n == 1) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));

        } else if (n == 2) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
        } else if (n == 3) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
        } else if (n == 4) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
            lblSeg4.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(3))));
        } else if (n == 5) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
            lblSeg4.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(3))));
            lblSeg5.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(4))));
        } else if (n == 6) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
            lblSeg4.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(3))));
            lblSeg5.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(4))));
            lblSeg6.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(5))));
        } else if (n == 7) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
            lblSeg4.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(3))));
            lblSeg5.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(4))));
            lblSeg6.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(5))));
            lblSeg7.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(6))));
        } else if (n == 8) {
            lblSeg1.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(0))));
            lblSeg2.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(1))));
            lblSeg3.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(2))));
            lblSeg4.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(3))));
            lblSeg5.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(4))));
            lblSeg6.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(5))));
            lblSeg7.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(6))));
            lblSeg8.setIcon(new ScaleIcon(new ImageIcon(subImgList.get(7))));
        }
    }

    public void delNosePoint(ArrayList<BufferedImage> subImgList) {
        for (int i = 0; i < subImgList.size(); i++) {
            BufferedImage t = subImgList.get(i);
            int area = t.getHeight() * t.getWidth();
            if (area < 4) {
                subImgList.remove(i);
                i--;
            }
        }
    }

    public ArrayList sortSegImgList(ArrayList<BufferedImage> subImgList) {
        ArrayList<Integer> countPoint = new ArrayList<Integer>();
        for (int i = 0; i < subImgList.size(); i++) {
            BufferedImage t = subImgList.get(i);
            countPoint.add(getBlackPoint(t));
        }
        ArrayList<Integer> max = getNumMaxImg(countPoint);
        Collections.sort(max);
//        for (int j = 0; j < max.size(); j++) {
//            System.out.println(max.get(j));
//        }
        return max;
    }

    //获取num个最大像素点的下标
    public ArrayList getNumMaxImg(ArrayList<Integer> countPoint) {
        ArrayList<Integer> max = new ArrayList<Integer>();
        for (int j = 0; j < num; j++) {
            int m = 0;
            int n = 0;
            int flag = 0;
            for (int i = 0; i < countPoint.size(); i++) {
                if (max.indexOf(i) != -1) {
                    continue;
                }
                if (flag == 0) {
                    m = countPoint.get(i);
                    n = i;
                    flag = 1;
                }
                if (m < countPoint.get(i)) {
                    m = countPoint.get(i);
                    n = i;
                }
            }
            max.add(n);
        }
        return max;
    }

    public int getBlackPoint(BufferedImage tImg) {
        int count = 0;
        int w = tImg.getWidth();
        int h = tImg.getHeight();
        for (int x = 0; x < w; x++) {
            for (int y = 0; y < h; y++) {
                if (isBlack(tImg.getRGB(x, y))) {
                    count++;
                }
            }
        }
        return count;
    }

    private static boolean isBlack(int rgb) {
        Color color = new Color(rgb);
        if (color.getRed() + color.getGreen() + color.getBlue() <= 300) {
            return true;
        }
        return false;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IndexFrame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IndexFrame().setVisible(true);
            }
        });

    }

    static BufferedImage deepCopy(BufferedImage bi) {
        ColorModel cm = bi.getColorModel();
        boolean isAlphaPremultiplied = cm.isAlphaPremultiplied();
        WritableRaster raster = bi.copyData(null);
        return new BufferedImage(cm, raster, isAlphaPremultiplied, null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateNewFont;
    private javax.swing.JButton btnOpenFont;
    private javax.swing.JButton btnReadFiles;
    private javax.swing.JButton btnReadNextImg;
    private javax.swing.JButton btnRestoreImg;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JCheckBox cbkSauvola;
    private javax.swing.JCheckBox cbxAlgorithm1;
    private javax.swing.JCheckBox cbxBersen;
    private javax.swing.JCheckBox cbxFCM;
    private javax.swing.JCheckBox cbxIteration;
    private javax.swing.JCheckBox cbxMeanFilter;
    private javax.swing.JCheckBox cbxMedianFilter;
    private javax.swing.JCheckBox cbxNiBlack;
    private javax.swing.JCheckBox cbxOstu;
    private javax.swing.JCheckBox cbxRealTimeTrain;
    private javax.swing.JCheckBox cbxSegCfg;
    private javax.swing.JCheckBox cbxSimpleSub;
    private javax.swing.JCheckBox cbxSymmetricalNeighborMeanFiltering;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel_main;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblBName;
    private javax.swing.JLabel lblBinaryName;
    private javax.swing.JLabel lblGName;
    private javax.swing.JLabel lblLinesName;
    private javax.swing.JLabel lblNoiseName;
    private javax.swing.JLabel lblNumber;
    private javax.swing.JLabel lblProcessImg;
    private javax.swing.JLabel lblProcessName;
    private javax.swing.JLabel lblRName;
    private javax.swing.JLabel lblSeg1;
    private javax.swing.JLabel lblSeg2;
    private javax.swing.JLabel lblSeg3;
    private javax.swing.JLabel lblSeg4;
    private javax.swing.JLabel lblSeg5;
    private javax.swing.JLabel lblSeg6;
    private javax.swing.JLabel lblSeg7;
    private javax.swing.JLabel lblSeg8;
    private javax.swing.JLabel lblSegName;
    private javax.swing.JLabel lblSrcImg;
    private javax.swing.JLabel lblSrcName;
    private javax.swing.JRadioButton rbtnCapitals;
    private javax.swing.JRadioButton rbtnGrayAverage;
    private javax.swing.JRadioButton rbtnGrayB;
    private javax.swing.JRadioButton rbtnGrayG;
    private javax.swing.JRadioButton rbtnGrayMax;
    private javax.swing.JRadioButton rbtnGrayR;
    private javax.swing.JRadioButton rbtnGrayWeightedAverage;
    private javax.swing.JRadioButton rbtnLetter;
    private javax.swing.JRadioButton rbtnNum;
    private javax.swing.JRadioButton rbtnNumCapitals;
    private javax.swing.JRadioButton rbtnNumLetter;
    private javax.swing.JSpinner spinnerNum;
    private javax.swing.JTextField txtBValue;
    private javax.swing.JTextField txtBersenW;
    private javax.swing.JTextField txtFCMexponent;
    private javax.swing.JTextField txtFCMiternum;
    private javax.swing.JTextField txtFontName;
    private javax.swing.JTextField txtGValue;
    private javax.swing.JTextField txtImgPath;
    private javax.swing.JTextField txtNiBlackK;
    private javax.swing.JTextField txtNiBlackW;
    private javax.swing.JTextField txtPredictResult;
    private javax.swing.JTextField txtRValue;
    private javax.swing.JTextField txtSauvolaK;
    private javax.swing.JTextField txtSauvolaW;
    // End of variables declaration//GEN-END:variables
}
